import * as path from "path";
import * as fs from "fs";

function getAllPublicFiles(dir: string): string[] {
  return fs
    .readdirSync(dir, { withFileTypes: true })
    .sort((a, b) => a.name.localeCompare(b.name))
    .flatMap((entry) => {
      const fullPath = path.join(dir, entry.name);
      return entry.isDirectory()
        ? getAllPublicFiles(fullPath)
        : [path.relative(path.resolve(__dirname, "../public"), fullPath)];
    });
}

function stringifyWithStyle(obj: any): string {
  const json = JSON.stringify(obj, null, 2);

  return json.replace(/"([^"]+)":/g, (_, key) =>
    /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(key) ? `${key}:` : `"${key}":`
  );
}

function generateMiddlewareConfig(): void {
  const publicDirectory = path.join(__dirname, "../public");
  const middlewarePath = path.join(__dirname, "../middleware.ts");
  const publicFiles = getAllPublicFiles(publicDirectory);
  const publicPattern = publicFiles.join("|");

  const config = {
    matcher: [
      `/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt|${publicPattern}).*)`,
    ],
  };

  const newConfigContent = `/** START OF AUTOGENERATED MIDDLEWARE CONFIG */\nexport const config = ${stringifyWithStyle(config)};\n/** END OF AUTOGENERATED MIDDLEWARE CONFIG */`;

  let middlewareContent = fs.readFileSync(middlewarePath, "utf8");

  middlewareContent = middlewareContent.replace(
    /\/\*\* START OF AUTOGENERATED MIDDLEWARE CONFIG \*\/[\s\S]*?\/\*\* END OF AUTOGENERATED MIDDLEWARE CONFIG \*\//,
    newConfigContent
  );

  fs.writeFileSync(middlewarePath, middlewareContent);
}

generateMiddlewareConfig();
